<?xml version="1.0" encoding="utf-8"?>
<!--
    The AndroidManifest.xml is like a configuration file for your entire app.
    It declares everything the Android system needs to know about your app:
    - Package name (unique app identifier)
    - Required permissions
    - App components (Activities, Services, etc.)
    - Hardware/software requirements
    - API level requirements

Key concepts for developers new to Android:

1. Package Name:
   - Defined in the manifest
   - Must be unique across all Android apps
   - Used as the app's unique identifier
   - Similar to Java package names but more important

2. Permissions:
   - Must be declared here explicitly
   - Different from desktop apps where permissions are implicit
   - Categories of permissions:
     * Normal: Automatically granted
     * Dangerous: Require user approval
     * Special: Require both manifest and special approval

3. Components:
   - Activities (UI screens)
   - Services (background operations)
   - Broadcast Receivers (system event handlers)
   - Content Providers (data sharing)
   - All must be declared here

4. Intent Filters:
   - Declare how components can be activated
   - Similar to registering for events but at app level
   - Define what kinds of operations an app/component can handle

5. Resource References:
   - @string/app_name - Reference to strings.xml
   - @mipmap/ic_launcher - Reference to app icon
   - @style/Theme.AudioSpectrograph - Reference to themes/styles

6. Hardware Requirements:
   - Can specify required or optional hardware
   - Affects app visibility in Play Store
   - Prevents installation on incompatible devices

7. Configuration:
   - Backup settings
   - Theme settings
   - RTL (Right-to-Left) support
   - API level targeting

Common pitfalls for newcomers:
1. Forgetting to declare permissions
2. Not understanding exported vs. non-exported components
3. Missing intent filters for launcher activity
4. Incorrect resource references
5. Not declaring required hardware features
6. Misunderstanding permission categories

This manifest is the equivalent of several configuration files in traditional Java apps, combined with deployment descriptors and security policies, all in one place.



-->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!--
        Permissions required by the app
        These must be declared here AND requested at runtime for Android 6.0+
        RECORD_AUDIO is considered a "dangerous" permission that requires explicit user approval
    -->
    <uses-permission android:name="android.permission.RECORD_AUDIO" />

    <!--
        Feature requirements - hardware or software capabilities the app needs
        This one indicates we need a microphone
        'required="true"' means the app won't install on devices without a mic
    -->
    <uses-feature android:name="android.hardware.microphone" android:required="true" />

    <!--
        The application tag contains app-wide settings and declares all app components
        android:allowBackup - Whether the app participates in Android's backup system
        android:icon - The app's icon (referenced from drawable resources)
        android:label - The app's name (referenced from string resources)
        android:theme - The default visual theme for the app
    -->
    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat"
        tools:targetApi="31">

        <!--
            Activity declarations - each screen in your app needs an entry here
            This declares MainActivity as the main entry point of the app

            android:exported="true" - Whether other apps can launch this activity
            Required for the main activity that should appear in the launcher
        -->
        <activity
            android:name=".MainActivity"
            android:exported="true">

            <!--
                Intent filters declare how an activity can be started
                This one marks MainActivity as the app's entry point
                LAUNCHER category makes it appear in the device's app launcher
            -->
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <!--
                Additional metadata for the activity can go here
                For example, special handling for screen orientation,
                keyboard behavior, etc.
            -->
        </activity>
    </application>

</manifest>
